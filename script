### IMPORTAR AS BIBLIOTECAS ###
from tqdm import tqdm # Exibição de barra de progresso
import pandas as pd # Ler a base do Excel
from geopy.geocoders import Nominatim # Conversão de endereços em coordenadas geográficas
from geopy.extra.rate_limiter import RateLimiter
from geopy.exc import GeocoderTimedOut, GeocoderServiceError
import requests # Requisições HTTP para as APIs Nominatim e OSRM
import pyomo.environ as pyo # Modelagem matemática e otimização
import folium # Criar mapas interativos
import polyline # Decodificar polylines (codificação de rotas geográficas)
import sys # Permitir sair do sistema em caso de erro
import time # Cálculo do tempo otimização


### IMPORTAR DADOS E INICIALIZAR O GEOCODER ###
inicio_coordenadas = time.time()

# Lê o arquivo Excel com os endereços das localizações
locais = pd.read_excel('Locais.xlsx', 'Planilha1')

# Inicializa o geocoder com um user_agent descritivo
localizador = Nominatim(user_agent="meu_app_de_geolocalizacao")

# Aplica o RateLimiter ao geocode com atraso de 1 segundo entre requisições
geocode = RateLimiter(localizador.geocode, min_delay_seconds=1)


### OBTER AS COORDENADAS DOS ENDEREÇOS (LATITUDE E LONGITUDE) ###
coordenadas_obtidas = True  # Variável para controlar se todas as coordenadas foram obtidas
i = 0
while i < len(locais):
    try:
        endereco = locais['Endereco'][i]
        print(f"Buscando coordenadas para: {endereco}")

        local = geocode(endereco) # Usa a função geocode com RateLimiter

        if local:
            print(f"Coordenadas: {i+1} ({local.latitude}, {local.longitude})\n")
        else:
            print(f"Endereço não encontrado. Revise-o e tente novamente.\n")
            coordenadas_obtidas = False  # Define como False se algum endereço não for encontrado

    except (GeocoderTimedOut, GeocoderServiceError) as e:
        print(f"Erro na geocodificação do endereço {locais['Endereco'][i+1]}: {e}")
        coordenadas_obtidas = False  # Define como False em caso de erro na geocodificação
    i += 1

if coordenadas_obtidas == True:
    print("Coordenadas geográficas obtidas com sucesso!\n\nCriando a matriz de distâncias...\n")
else:
    print("Erro: Não foi possível obter as coordenadas de todos os endereços.")
    sys.exit()
fim_coordenadas = time.time()


### CRIAR A MATRIZ DE DISTÂNCIAS ###
inicio_calculo = time.time()

# Cria a matriz
num_locais = len(locais)
distancias = [[0 for _ in range(num_locais)] for _ in range(num_locais)]

# Função para calcular a distância rodoviária usando a API Nominatim
def calcular_distancia_rodoviaria(coord1, coord2):
    url = f"https://router.project-osrm.org/route/v1/driving/{coord1[1]},{coord1[0]};{coord2[1]},{coord2[0]}?overview=full&geometries=polyline"
    resposta = requests.get(url)
    dados = resposta.json()
    if 'routes' in dados and len(dados['routes']) > 0:
        return dados['routes'][0]['distance']  # Retorna a distância
    else:
        print(f"Erro ao calcular a distância entre {coord1} e {coord2}")
        return None

# Calcula as distâncias rodoviárias entre cada par de endereços
for i in tqdm(range(num_locais), desc="Calculando distâncias"):
    for j in range(i + 1, num_locais):  # Calcula apenas para j > i
        try:
            endereco1 = locais['Endereco'][i]
            endereco2 = locais['Endereco'][j]

            # Obtém as coordenadas dos endereços
            local1 = geocode(endereco1)
            local2 = geocode(endereco2)

            if local1 and local2:
                # Calcula a distância de i para j
                distancia_ida = calcular_distancia_rodoviaria(
                    (local1.latitude, local1.longitude),
                    (local2.latitude, local2.longitude)
                )
                # Calcula a distância de j para i
                distancia_volta = calcular_distancia_rodoviaria(
                    (local2.latitude, local2.longitude),
                    (local1.latitude, local1.longitude)
                )

                if distancia_ida is not None and distancia_volta is not None:
                    # Armazena as distâncias na matriz (em metros)
                    distancias[i][j] = distancia_ida  # Ida: i para j
                    distancias[j][i] = distancia_volta  # Volta: j para i

        except (GeocoderTimedOut, GeocoderServiceError) as e:
            print(f"Erro na geocodificação: {e}")

# Imprime a matriz de distâncias
for linha in distancias:
    print(linha)


### CÁLCULO DE OTIMIZAÇÃO DO PYOMO ###
# Modelo Pyomo para o PCV
modelo = pyo.ConcreteModel()

# Conjuntos
modelo.N = pyo.RangeSet(num_locais)  # Conjunto de nós
modelo.A = pyo.Set(within=modelo.N * modelo.N, initialize = [(i,j) for i in modelo.N for j in modelo.N if i!=j]) # Conjunto de arcos

# Parâmetros
modelo.c = pyo.Param(modelo.A, initialize={(i, j): distancias[i-1][j-1] for i, j in modelo.A})  # Custo (distância) entre cada par de nós

# Variáveis de decisão
modelo.x = pyo.Var(modelo.A, within=pyo.Binary)  # 1 se o arco (i,j) é percorrido, 0 caso contrário

# Função objetivo: minimizar a distância total
def objetivo_solver(modelo):
    return sum(modelo.c[i, j] * modelo.x[i, j] for i, j in modelo.A)
modelo.objetivo = pyo.Objective(rule=objetivo_solver, sense=pyo.minimize)

# Restrições
# 1. Cada local deve ser visitado exatamente uma vez
def restricao_visitar_uma_vez(modelo, j):
    return sum(modelo.x[i, j] for i in modelo.N if (i, j) in modelo.A) == 1
modelo.visitar_uma_vez = pyo.Constraint(modelo.N, rule=restricao_visitar_uma_vez)

# 2. Cada local deve ser saída de exatamente uma viagem
def restricao_sair_uma_vez(modelo, i):
    return sum(modelo.x[i, j] for j in modelo.N if (i, j) in modelo.A) == 1
modelo.sair_uma_vez = pyo.Constraint(modelo.N, rule=restricao_sair_uma_vez)

# 3. Eliminar subtours (restrição MTZ)
#     u_i - u_j + n * x_ij <= n - 1  para todo i, j em N, i != j, i, j >= 2
modelo.u = pyo.Var(modelo.N, within=pyo.NonNegativeReals)
def restricao_eliminacao_subtours(modelo, i, j):
    if i != j and i >= 2 and j >= 2:
        return modelo.u[i] - modelo.u[j] + num_locais * modelo.x[i, j] <= num_locais - 1
    else:
        return pyo.Constraint.Skip
modelo.eliminacao_subtours = pyo.Constraint(modelo.N, modelo.N, rule=restricao_eliminacao_subtours)

# 4. Garantir que o último local visitado se conecte de volta ao primeiro
def restricao_retornar_para_origem(modelo):
    return sum(modelo.x[i, 1] for i in modelo.N if (i, 1) in modelo.A) == 1
modelo.retornar_para_origem = pyo.Constraint(rule=restricao_retornar_para_origem)

# Resolve o modelo
solver = pyo.SolverFactory('glpk')
resultado_solver = solver.solve(modelo)

# Imprime os resultados
print(resultado_solver)

# Exibe a rota ótima
rota = []
local_atual = 1  # Começa no local 1
while True:
    rota.append(local_atual)
    for j in modelo.N:
        if (local_atual, j) in modelo.A and pyo.value(modelo.x[local_atual, j]) == 1:
            local_atual = j
            break
    if local_atual == 1:  # Volta para o local inicial
        break

# Adiciona o local de origem no final da rota
rota.append(1)

print("Rota ótima:", rota)
fim_calculo = time.time()


### CRIAR O MAPA COM A ROTA ÓTIMA EM UM ARQUIVO .HTML ###
# Cria o mapa
mapa = folium.Map(location=[local1.latitude, local1.longitude], zoom_start=10)

# Adiciona marcadores para cada localização
for i, local in enumerate(locais['Endereco']):
    html_icone = f"""
    <div style="
        font-family: Arial, sans-serif;
        font-size: 12px;
        color: white;
        text-align: center;
        background-color: blue; 
        border-radius: 50%; 
        width: 30px; 
        height: 30px; 
        line-height: 30px; 
    ">{i + 1}</div>
    """
    icone = folium.DivIcon(html=html_icone)

    folium.Marker(
        location=[geocode(local).latitude, geocode(local).longitude],
        icon=icone
    ).add_to(mapa)

# Função para obter a rota da API OSRM
def obter_rota_real(coord1, coord2):
    url = f"https://router.project-osrm.org/route/v1/driving/{coord1[1]},{coord1[0]};{coord2[1]},{coord2[0]}?overview=full&geometries=polyline"
    resposta = requests.get(url)
    dados = resposta.json()
    if 'routes' in dados and len(dados['routes']) > 0:
        return dados['routes'][0]['geometry']  # Retorna a polyline da rota
    else:
        print(f"Erro ao obter a rota entre {coord1} e {coord2}")
        return None

# Cria uma lista de coordenadas para a rota (decodificando as polylines)
coordenadas_rota_real = []
for i in range(len(rota) - 1):
    local_atual = rota[i]
    proximo_local = rota[i + 1]

    endereco_atual = locais['Endereco'][local_atual - 1]
    endereco_proximo = locais['Endereco'][proximo_local - 1]

    local_atual = geocode(endereco_atual)
    local_proximo = geocode(endereco_proximo)

    polyline_rota = obter_rota_real(
        (local_atual.latitude, local_atual.longitude),
        (local_proximo.latitude, local_proximo.longitude)
    )

    if polyline_rota:
        # Decodifica a polyline para obter as coordenadas da rota
        coordenadas_decodificadas = polyline.decode(polyline_rota)
        coordenadas_rota_real.extend(coordenadas_decodificadas)

# Adiciona a rota ao mapa
folium.PolyLine(coordenadas_rota_real, color="blue", weight=2.5, opacity=1).add_to(mapa)

# Adiciona a variável "rota" como uma lista no mapa
rota = rota[:-1]
rota_html = f"""
    <div id="rota-fixa" style="
        position: fixed; 
        bottom: 0px; 
        right: -600px; 
        font-family: Arial, sans-serif;
        font-size: 16px;
        color: black; 
        text-align: left;
        background-color: rgba(255, 255, 255, 1);
        padding: 5px;
        border-radius: 5px;
        white-space: pre-line;
    ">
        Lista de endereços:<br>
        {
            "<br>".join([f"{indice} - {locais['Endereco'][indice-1]}" for i, indice in enumerate(rota)])
        }
    </div>
"""

icone = folium.DivIcon(html=rota_html)
popup = folium.Popup(icone, max_width=2650, show=True)

# Cria um marcador invisível para "segurar" o popup com a rota
folium.Marker(
    location=[list(coordenadas_rota_real[0])[0], list(coordenadas_rota_real[0])[1]],
    icon=icone
).add_to(mapa)

# Salva o mapa em um arquivo HTML
mapa.save("rota_otima.html")
print('\nMapa gerado no arquivo "rota_otima.html"')


### CALCULAR TEMPOS DE COLETA DE COORDENADAS E CÁLCULO DE OTIMIZAÇÃO ###
tempo_coordenadas = fim_coordenadas - inicio_coordenadas
print(f"\nTempo busca coordenadas: {tempo_coordenadas:.1f} seg.")
tempo_calculo = fim_calculo - inicio_calculo
print(f"Tempo busca distâncias e cálculo otimização: {tempo_calculo:.1f} seg.")
